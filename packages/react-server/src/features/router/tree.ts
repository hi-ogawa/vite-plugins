import { tinyassert } from "@hiogawa/utils";
import { getPathPrefixes, normalizePathname } from "./utils";

export interface BaseRouteEntry<T> {
  page?: T;
  layout?: T;
  error?: T;
}

// generate tree from glob entries such as generated by
//   import.meta.glob("/**/(page|layout|error).(js|jsx|ts|tsx)")
export function generateRouteTree<T>(
  globEntries: Record<string, T>,
): TreeNode<BaseRouteEntry<T>> {
  const entries: Record<string, BaseRouteEntry<T>> = {};
  for (const [k, v] of Object.entries(globEntries)) {
    const m = k.match(/^(.*)\/(page|layout|error)\.\w*$/);
    tinyassert(m && 1 in m && 2 in m);
    ((entries[m[1]] ??= {}) as any)[m[2]] = v;
  }

  const flatTree = Object.entries(entries).map(([k, v]) => ({
    keys: k.split("/"),
    value: v,
  }));
  const tree = createTree(flatTree);
  return tree;
}

export function matchRouteTree<T>(tree: TreeNode<T>, pathname: string) {
  pathname = normalizePathname(pathname);
  const prefixes = getPathPrefixes(pathname);

  let node = tree;
  let nodes: TreeNode<T>[] = [];
  let params: Record<string, string> = {};
  for (const prefix of prefixes) {
    const key = prefix.split("/").at(-1)!;
    const next = matchRouteChild(key, node);
    if (next?.child) {
      node = next.child;
      if (next.param) {
        params = { ...params, [next.param]: key };
      }
    } else {
      node = initTreeNode();
    }
    nodes.push(node);
  }
  return { nodes };
}

export function matchRouteChild<T>(input: string, node: TreeNode<T>) {
  if (!node.children) {
    return;
  }
  // TODO: sort to dynmaic one come last
  // TODO: catch-all route
  for (const [segment, child] of Object.entries(node.children)) {
    const m = segment.match(/^\[(.*)\]$/);
    if (m) {
      tinyassert(1 in m);
      return { param: m[1], child };
    }
    if (segment === input) {
      return { child };
    }
  }
  return;
}

//
// general tree utils copied from vite-glob-routes
// https://github.com/hi-ogawa/vite-plugins/blob/c2d22f9436ef868fc413f05f243323686a7aa143/packages/vite-glob-routes/src/react-router/route-utils.ts#L15-L22
//

export type TreeNode<T> = {
  value?: T;
  children?: Record<string, TreeNode<T>>;
};

export function initTreeNode<T>(): TreeNode<T> {
  return {};
}

export function createTree<T>(
  entries: { value: T; keys: string[] }[],
): TreeNode<T> {
  const root = initTreeNode<T>();

  for (const e of entries) {
    let node = root;
    for (const key of e.keys) {
      node = (node.children ??= {})[key] ??= initTreeNode();
    }
    node.value = e.value;
  }

  return root;
}
