import { sortBy, tinyassert } from "@hiogawa/utils";
import type { AnyRouteModule } from "./server";
import { getPathPrefixes } from "./utils";

// generate tree from glob entries such as generated by
//   import.meta.glob("/**/(page|layout|...).(js|jsx|ts|tsx)")
export function createFsRouteTree<T>(globEntries: Record<string, unknown>): {
  entries: Record<string, T>;
  tree: TreeNode<T>;
} {
  const entries: Record<string, T> = {};
  for (const [k, v] of Object.entries(globEntries)) {
    const m = k.match(
      /^(.*)\/(page|layout|error|not-found|loading|template|route)\.\w*$/,
    );
    tinyassert(m && 1 in m && 2 in m);
    const pathname = m[1] || "/";
    (entries[pathname] ??= {} as any)[m[2]] = v;
  }

  const flatTree = Object.entries(entries).map(([k, v]) => ({
    keys: k.replace(/\/+$/, "").split("/"),
    value: v,
  }));
  const tree = createTree(flatTree);

  // sort to match static route first before dynamic route
  sortDynamicRoutes(tree);

  return { entries, tree };
}

function sortDynamicRoutes<T>(tree: TreeNode<T>) {
  if (tree.children) {
    tree.children = Object.fromEntries(
      sortBy(Object.entries(tree.children), ([k]) => k.includes("[")),
    );
    for (const v of Object.values(tree.children)) {
      sortDynamicRoutes(v);
    }
  }
}

export type MatchParamEntry = [key: string | null, value: string];
export type MatchParams = Record<string, string>;

export function toMatchParamsObject(params: MatchParamEntry[]): MatchParams {
  let result: MatchParams = {};
  for (const [k, v] of params) {
    if (k) {
      result[k] = v;
    }
  }
  return result;
}

export type MatchNodeEntry<T> = {
  prefix: string;
  type: MatchNodeType;
  node: TreeNode<T>;
  params: MatchParamEntry[];
};

type MatchNodeType = "layout" | "page" | "not-found";

export function toRouteId(pathname: string, type: MatchNodeType) {
  return pathname + ":" + type;
}

export type MatchResult<T> = {
  matches: MatchNodeEntry<T>[];
  notFound: boolean;
};

export function matchRouteTree<T extends AnyRouteModule>(
  tree: TreeNode<T>,
  pathname: string,
  leafType: "page" | "route" = "page",
): MatchResult<T> {
  const prefixes = getPathPrefixes(pathname);

  let node = tree;
  let params: MatchParamEntry[] = [];
  let matches: MatchNodeEntry<T>[] = [];
  let notFound = false;
  for (let i = 0; i < prefixes.length; i++) {
    const prefix = prefixes[i]!;
    const segment = prefix.split("/").at(-1)!;
    const next = matchRouteChild(segment, node);
    if (next) {
      node = next.child;
      if (next.catchAll) {
        const rest = pathname.slice(prefixes[i - 1]!.length + 1);
        params = [...params, [next.param, decodeURI(rest)]];
        matches.push({ prefix: pathname, type: "layout", node, params });
        break;
      }
      if (next.param) {
        params = [...params, [next.param, decodeURI(segment)]];
      } else {
        params = [...params, [null, decodeURI(segment)]];
      }
    } else {
      notFound = true;
      break;
    }
    matches.push({ prefix, type: "layout", node, params });
  }

  // fix up "page" and "not-found"
  if (!notFound) {
    if (matches.at(-1)?.node.value?.[leafType]) {
      matches.push({ ...matches.at(-1)!, type: "page" });
    } else {
      notFound = true;
    }
  }
  if (notFound) {
    const i = matches.findIndex((m) => m.node.value?.["not-found"]);
    if (i !== -1) {
      matches = matches.slice(0, i + 1);
      matches.push({ ...matches.at(-1)!, type: "not-found" });
    } else {
      // TODO: default root not-found page?
    }
  }

  return { matches, notFound };
}

const DYNAMIC_RE = /^\[(\w*)\]$/;
const CATCH_ALL_RE = /^\[\.\.\.(\w*)\]$/;

function matchRouteChild<T>(input: string, node: TreeNode<T>) {
  if (!node.children) {
    return;
  }
  for (const [segment, child] of Object.entries(node.children)) {
    const mAll = segment.match(CATCH_ALL_RE);
    if (mAll) {
      tinyassert(1 in mAll);
      return { param: mAll[1], child, catchAll: true };
    }
    const m = segment.match(DYNAMIC_RE);
    if (m) {
      tinyassert(1 in m);
      return { param: m[1], child };
    }
    if (segment === input) {
      return { child };
    }
  }
  return;
}

export function parseRoutePath(pathname: string) {
  const dynamicMap: Record<string, string> = {};

  for (const segment of pathname.split("/")) {
    const mAll = segment.match(CATCH_ALL_RE);
    if (mAll) {
      tinyassert(1 in mAll);
      mAll[1];
      dynamicMap[mAll[1]] = segment;
    }
    const m = segment.match(DYNAMIC_RE);
    if (m) {
      tinyassert(1 in m);
      dynamicMap[m[1]] = segment;
    }
  }

  function format(params: Record<string, string>): string {
    let result = pathname;
    tinyassert(
      isEqualArrayShallow(
        Object.keys(dynamicMap).sort(),
        Object.keys(params).sort(),
      ),
    );
    for (const [k, v] of Object.entries(params)) {
      const segment = dynamicMap[k];
      tinyassert(segment);
      result = result.replace(segment, v);
    }
    return result;
  }

  return {
    dynamic: Object.keys(dynamicMap).length > 0,
    format,
  };
}

function isEqualArrayShallow(xs: unknown[], ys: unknown[]) {
  return xs.length === ys.length && xs.every((x, i) => x === ys[i]);
}

//
// minimal basic tree structure
//

export type TreeNode<T> = {
  value?: T;
  children?: Record<string, TreeNode<T>>;
};

function initTreeNode<T>(): TreeNode<T> {
  return {};
}

function createTree<T>(entries: { value: T; keys: string[] }[]): TreeNode<T> {
  const root = initTreeNode<T>();

  for (const e of entries) {
    let node = root;
    for (const key of e.keys) {
      node = (node.children ??= {})[key] ??= initTreeNode();
    }
    node.value = e.value;
  }

  return root;
}
