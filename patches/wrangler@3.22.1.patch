diff --git a/wrangler-dist/cli.js b/wrangler-dist/cli.js
index d936c3b9d5d9840c2173581f7171eb3f917ecd37..d4e7ce53ace6be2ad581d2573d63908b27b35b02 100644
--- a/wrangler-dist/cli.js
+++ b/wrangler-dist/cli.js
@@ -29371,12 +29371,14 @@ var require_wasm_sync = __commonJS({
           1 < process.argv.length && process.argv[1].replace(/\\/g, "/");
           process.argv.slice(2);
           process.on("uncaughtException", function(a) {
-            throw a;
+            console.error("[uncaughtException]", a)
+            // throw a;
           });
           process.on(
             "unhandledRejection",
             function(a) {
-              throw a;
+              console.error("[unhandledRejection]", a)
+              // throw a;
             }
           );
           l.inspect = function() {
@@ -72465,7 +72467,7 @@ var require_dbcs_data = __commonJS({
       // == Japanese/ShiftJIS ====================================================
       // All japanese encodings are based on JIS X set of standards:
       // JIS X 0201 - Single-byte encoding of ASCII + Â¥ + Kana chars at 0xA1-0xDF.
-      // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
+      // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes.
       //              Has several variations in 1978, 1983, 1990 and 1997.
       // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
       // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
@@ -72482,7 +72484,7 @@ var require_dbcs_data = __commonJS({
       //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
       //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
       //               Used as-is in ISO2022 family.
-      //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
+      //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII,
       //                0201-1976 Roman, 0208-1978, 0208-1983.
       //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
       //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
@@ -72593,7 +72595,7 @@ var require_dbcs_data = __commonJS({
       //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
       //  * Big5-2003 (Taiwan standard) almost superset of cp950.
       //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
-      //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
+      //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard.
       //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
       //    Plus, it has 4 combining sequences.
       //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
@@ -72604,7 +72606,7 @@ var require_dbcs_data = __commonJS({
       //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
       //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
       //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
-      // 
+      //
       // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
       // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.
       "windows950": "cp950",
@@ -135632,7 +135634,7 @@ var RestoreHandler2 = withConfig(
         "bookmark"
       )}
 			`);
-      logger.log(`\u26A0\uFE0F This will overwrite all data in database ${database}. 
+      logger.log(`\u26A0\uFE0F This will overwrite all data in database ${database}.
 In-flight queries and transactions will be cancelled.
 			`);
       if (await confirm("OK to proceed (y/N)", { defaultValue: false })) {
@@ -140430,7 +140432,7 @@ var PQueue = class extends import_eventemitter3.default {
   }
   /**
       Same as `.add()`, but accepts an array of sync or async functions.
-  
+
       @returns A promise that resolves when all functions are resolved.
       */
   async addAll(functions, options25) {
@@ -140461,7 +140463,7 @@ var PQueue = class extends import_eventemitter3.default {
   }
   /**
       Can be called multiple times. Useful if you for example add additional items at a later time.
-  
+
       @returns A promise that settles when the queue becomes empty.
       */
   async onEmpty() {
@@ -140478,9 +140480,9 @@ var PQueue = class extends import_eventemitter3.default {
   }
   /**
       @returns A promise that settles when the queue size is less than the given limit: `queue.size < limit`.
-  
+
       If you want to avoid having the queue grow beyond a certain size you can `await queue.onSizeLessThan()` before adding a new item.
-  
+
       Note that this only limits the number of items waiting to start. There could still be up to `concurrency` jobs already running that this call does not include in its calculation.
       */
   async onSizeLessThan(limit) {
@@ -140499,7 +140501,7 @@ var PQueue = class extends import_eventemitter3.default {
   }
   /**
       The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
-  
+
       @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
       */
   async onIdle() {
@@ -140522,7 +140524,7 @@ var PQueue = class extends import_eventemitter3.default {
   }
   /**
       Size of the queue, filtered by the given options.
-  
+
       For example, this can be used to find the number of items remaining in the queue with a specific priority level.
       */
   sizeBy(options25) {
@@ -160979,6 +160981,7 @@ var ProxyController = class extends import_node_events3.EventEmitter {
   }
   runtimeMessageMutex = new import_miniflare15.Mutex();
   async sendMessageToProxyWorker(message, retries = 3) {
+    console.log("[sendMessageToProxyWorker]", { message });
     if (this._torndown)
       return;
     try {
